buildscript {

    ext {
        springBootVersion = '2.1.0.RELEASE'
        springCloudVersion = 'Finchley.SR2'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://repo.spring.io/libs-milestone'
        }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.2.RELEASE"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
//        classpath 'com.bmuschko:gradle-docker-plugin:3.0.12'
    }
}


plugins {
    id 'net.researchgate.release' version '2.4.1'
    id "com.jfrog.bintray" version "1.7"
    id 'org.springframework.boot' version '2.1.0.RELEASE' apply false
}

apply plugin: 'java'
apply plugin: "io.spring.dependency-management"
apply plugin: 'jacoco'

apply from: 'build-quality.gradle'
apply from: 'https://raw.githubusercontent.com/reportportal/gradle-scripts/master/build-info.gradle'
apply from: 'https://raw.githubusercontent.com/reportportal/gradle-scripts/master/build-docker.gradle'


sourceCompatibility = 1.8
targetCompatibility = 1.8

description = 'EPAM Report portal. SSO Authorization Service'

project.ext {
    releaseMode = project.hasProperty("releaseMode")
}

repositories {
    mavenCentral()

    if (!releaseMode) {

        maven { url "https://jitpack.io" }
    }

    maven { url "http://dl.bintray.com/epam/reportportal" }
    maven { url 'https://repo.spring.io/libs-milestone' }
}

dependencyManagement {
    imports {
        mavenBom "com.github.reportportal:commons-bom:8706fef"
    }
}

dependencies {
    if (releaseMode) {
//        compile 'com.epam.reportportal:commons-rules:4.0.1'
    } else {
        compile 'com.github.reportportal:commons-dao:866d908'
        compile 'com.github.reportportal:commons-model:8391ca1'
        compile 'com.github.reportportal:commons-rules:spb2-SNAPSHOT'
    }

    compile 'javax.inject:javax.inject:1'
    compile 'org.hibernate:hibernate-validator:6.0.7.Final'
    compile('io.springfox:springfox-swagger2')
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.security.oauth:spring-security-oauth2:2.2.1.RELEASE'
    compile 'org.springframework.security:spring-security-oauth2-client'
    compile group: 'org.springframework.security.oauth.boot', name: 'spring-security-oauth2-autoconfigure', version: '2.1.0.RELEASE'
    compile 'org.springframework.security:spring-security-jwt'
    compile 'org.springframework.security:spring-security-jwt:1.0.9.RELEASE'


//    compile 'org.springframework.cloud:spring-cloud-starter-consul-discovery'

    //https://github.com/spring-projects/spring-security-oauth/issues/706
    //Cannot store oauth client details without session
//    compile 'org.springframework.session:spring-session-jdbc'
//    compile 'org.springframework.session:spring-session-data-mongo'

    compile 'org.apache.tika:tika-core:1.17'
    compile 'org.apache.tika:tika-parsers:1.17'

    //LDAP stuff
    compile("org.springframework.ldap:spring-ldap-core")
    compile("org.springframework.security:spring-security-ldap")
    compile("org.springframework:spring-tx")
    compile("com.unboundid:unboundid-ldapsdk")
    compile("org.apache.directory.server:apacheds-core:1.5.5")
    compile("org.apache.directory.server:apacheds-protocol-ldap:1.5.5")
    compile 'org.jasypt:jasypt:1.9.2'

    compile 'org.springframework.retry:spring-retry'

    compile("org.springframework.boot:spring-boot-starter-data-jpa")
//    compile 'org.springframework.cloud:spring-cloud-starter-security'
    compile 'org.postgresql:postgresql:42.2.2'
    compile group: 'org.jooq', name: 'jooq', version: '3.11.4'
    compile 'commons-beanutils:commons-beanutils:1.9.3'

    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit'
    testCompile 'org.springframework.boot:spring-boot-test'
    testCompile 'org.springframework:spring-test'


}

/*
 * Copyright 2019 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Starting from 1.4 Spring Boot uses very strange repackage model which does not allow this JAR to be used as dependency
 * So package jar by hands */
task copyRuntimeLibs(type: Copy) {
    into "$buildDir/libs/lib"
    from configurations.runtime
}

build.dependsOn(copyRuntimeLibs)


jar {
    archiveName "${baseName}.${extension}"
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    manifest {
        attributes 'Implementation-Title': 'ReportPortal Auth Server Commons',
                'Implementation-Version': version,
                'Main-Class': 'com.epam.reportportal.auth.AuthServerApplication',
                'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')

    }

}


task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}

/* CANNOT PUT publish scripts in separate file due to incorrect POM file generation */
apply plugin: 'maven'
apply plugin: 'maven-publish'

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc() {
    failOnError = false
}

task fatDist(type: Zip) {
    archiveName = "${baseName}.${extension}"
    appendix = 'dist'
    into('lib') {
        from configurations.runtime
    }
    into('./') {
        from jar
    }
}
fatDist.dependsOn 'jar', 'copyRuntimeLibs'

artifacts {
    archives sourcesJar
    archives javadocJar
    archives fatDist
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId 'com.epam.reportportal'
            artifactId "$project.name"
            artifact sourcesJar
            artifact javadocJar
            artifact fatDist
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['mavenJava']
    publish = true
    pkg {
        repo = 'reportportal'
        name = "$project.name"
        desc = "$project.description"
        websiteUrl = 'https://reportportal.github.io/'
        issueTrackerUrl = "https://github.com/reportportal/$project.name/issues"
        vcsUrl = "https://github.com/reportportal/$project.name"
        githubRepo = "reportportal/$project.name"
        githubReleaseNotesFile = 'CHANGELOG.md'

        userOrg = 'epam'
        licenses = ['GPL-3.0']
    }
}


task releaseDockerfile(type: Copy) {
    /* copy dockerfile and replace version of JAR */
    from('docker/Dockerfile-release')

    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: project.properties.findAll {
        it.value instanceof String
    }.collectEntries {
        [it.key, it.value]
    })

    into "${project.projectDir}/"
    rename('Dockerfile-release', 'Dockerfile')
}

task addDockerfileToGit << {
    grgit = org.ajoberstar.grgit.Grgit.open(dir: '.')

    grgit.add(patterns: ['Dockerfile'])
}

task removeDockerfileFromGit << {
    grgit = org.ajoberstar.grgit.Grgit.open(dir: '.')

    grgit.remove(patterns: ['Dockerfile'])
}

task resolveDependencies() {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                if (configuration.isCanBeResolved()) configuration.resolve()
            }
            subProject.configurations.each { configuration ->
                if (configuration.isCanBeResolved()) configuration.resolve()
            }
        }
    }
}

addDockerfileToGit.dependsOn releaseDockerfile
updateVersion.dependsOn removeDockerfileFromGit
beforeReleaseBuild.dependsOn addDockerfileToGit
afterReleaseBuild.dependsOn bintrayUpload

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

build.dependsOn jacocoTestReport
